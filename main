#!/usr/bin/python -u

import os
import json
import re
import subprocess
import nibabel
from dipy.io import read_bvals_bvecs
from dipy.core.gradients import gradient_table

import math
import numpy as np

#import matplotlib.pyplot as plt

# display where this is running (debug?)
import socket
print(socket.gethostname())

# Things that this script checks
# 
# * make sure nibabel runs successfully on specified dwi file
# * make sure dwi is 4d
# * raise warning if dwi transformation matrix isn't unit matrix (identity matrix)
# * make sure bvecs and bvals can be read
# * make sure bvecs's cols count matches dwi's 4th dimension number
# * make sure bvecs has 3 rows
# * make sure bvals's cols count matches dwi's 4th dimension number
# * make sure bvals has 1 row
# * check for bvecs flipping (x/z and z)

#Returns the unit vector of the vector. 
def unit_vector(vector):
    return vector / np.linalg.norm(vector)

#Returns the angle in radians between vectors 'v1' and 'v2' 
def angle_between(v1, v2):
    v1_u = unit_vector(v1)
    v2_u = unit_vector(v2)
    return np.arccos(np.clip(np.dot(v1_u, v2_u), -1.0, 1.0))

#flip angle that's >90 to face the same direction
def flip_angle(a):
    if a > math.pi/2:
        return math.pi - a
    return a

#find the most common bvals used
def most_common(bvals):
    round_bvals = []
    for bval in bvals:
        round_bvals.append(round(bval, -2))
    return max(set(round_bvals), key=bvals.count)

#the heart of bvecs/bvals detection
def sum_diag(img, shift):
    sum=img[0]
    for i in range(1, img.shape[0]):
        sum = np.roll(sum, shift)
        sum = np.add(sum, img[i])
    return sum

with open('config.json') as config_json:
    config = json.load(config_json)

results = {"errors": [], "warnings": [], "brainlife": [], "datatype_tags": [], "tags": []}
directions = None
gtab = None

def warning(msg):
    global results
    results['warnings'].append(msg) 
    results['brainlife'].append({"type": "warning", "msg": msg}) 
def error(msg):
    global results
    results['errors'].append(msg) 
    results['brainlife'].append({"type": "error", "msg": msg}) 

def check_affine(affine):
    if affine[0][0] != 1: warning("transform matrix 0.1 is not 1")
    if affine[0][1] != 0: warning("transform matrix 0.2 is not 0")
    if affine[0][2] != 0: warning("transform matrix 0.2 is not 0")
    if affine[1][0] != 0: warning("transform matrix 1.0 is not 0")
    if affine[1][1] != 1: warning("transform matrix 1.1 is not 1")
    if affine[1][2] != 0: warning("transform matrix 1.2 is non 0")
    if affine[2][0] != 0: warning("transform matrix 2.0 is not 0")
    if affine[2][1] != 0: warning("transform matrix 2.1 is not 0")
    if affine[2][2] != 1: warning("transform matrix 2.2 is not 1")

def isFloat(v):
    try:     i = float(v)
    except:  return False
    return True

def isInt(v):
    try:     i = int(v)
    except:  return False
    return True

def get_change(current, previous):
    if current == previous:
        return 100.0
    try:
        return (abs(current - previous) / previous) * 100.0
    except ZeroDivisionError:
        return 0

print("checking input paramerters")
if config['dwi'] is None:
    error("dwi not set")

if config['bvecs'] is None:
    error("bvecs not set")

if config['bvals'] is None:
    error("bvals not set")

if len(results['errors']) == 0:
    try:
        print("validating bvecs")
        bvecs = open(config['bvecs'])
        bvecs_rows = bvecs.readlines()
        bvecs_cols = bvecs_rows[0].strip().replace(",", " ")

        # remove double spaces
        bvecs_cols_clean = re.sub(' +', ' ', bvecs_cols)
        bvecs_cols = bvecs_cols_clean.split(' ')
        directions = len(bvecs_cols)

        # check 4d size
        if directions < 10:
            warning("direction seems too small.." + str(directions))

        # bvecs should have 3 row
        if len(bvecs_rows) != 3:
            error("bvecs should have 3 rows but it has " + str(len(bvecs_rows)))

        # write out bvecs (write in FSL format - space delimited)
        f = open('dwi.bvecs', 'w')
        for row in bvecs_rows:
            row = row.strip().replace(",", " ")
            row_clean = re.sub(' +', ' ', row)

            f.write(row_clean)
            f.write("\n")

            #check to make sure all values are float
            for v in row_clean.split(' '):
                if not isFloat(v):
                    error("bvecs contains non float:" +v)

        f.close();

    except IOError:
        print("failed to load bvecs:" + config['bvecs'])
        error("Couldn't read bvecs")

    try:
        print("validating bvals")
        bvals = open(config['bvals'])
        bvals_rows = bvals.readlines()
        bvals_cols = bvals_rows[0].strip().replace(",", " ").replace("\t", " ")

        # remove double spaces
        bvals_cols_clean = re.sub(' +', ' ', bvals_cols)
        bvals_cols = bvals_cols_clean.split(" ")

        if directions != len(bvals_cols):
            error(
                "bvals column count which is " + str(len(bvals_cols)) + " doesn't match dwi's 4d number:" + str(
                    directions))

        if len(bvals_rows) != 1:
            error("bvals should have 1 row but it has " + str(len(bvals_rows)))


        # analyze single / multi shell (0, 2000 is single. 0,2000,3000 is multi shell)
        unique_bvals = list(set(bvals_cols))
        bvalues = list(set(bvals_cols))

        # is normalized?
        normalized = True
        for bvalue in bvalues:
            if not isInt(bvalue):
                error("bvals contains non int:" +v)
            else:
                if float(bvalue) != round(float(bvalue), -2):
                    normalized = False
        if normalized:
            results['datatype_tags'].append("normalized")

        # is single shell?
        if len(bvalues) <= 2:
            results['datatype_tags'].append("single_shell")
            results['tags'].append("b" + str(bvalues[1]))

        # write out normalized bvals (write in FSL format - space delimited)
        f = open('dwi.bvals', 'w')
        f.write(bvals_cols_clean)
        f.write("\n")
        f.close()

    except IOError:
        print("failed to load bvals:" + config['bvals'])
        error("Couldn't read bvals")

    print("analyzing bvecs/bvals")
    bvals, bvecs = read_bvals_bvecs('dwi.bvals', 'dwi.bvecs')
    try: 
        gtab = gradient_table(bvals, bvecs)
        #results['gtab_info'] = gtab.info #set to Null somehwo
        print gtab
    except ValueError,e:
        warning(str(e))

        #re-try with rediculous atol to bypass the check (some data has [0,0,0] vector!
        gtab = gradient_table(bvals, bvecs, atol=1)

    #sort into shells (1000th)
    shells = {}
    for i in range(len(gtab.bvals)):
        bval = gtab.bvals[i]
        bvec = gtab.bvecs[i]
        shell = str(round(bval, -3))
        if shell not in shells:
            shells[shell] = []
        shells[shell].append((i, bval, bvec*bval))

    #simulate bvecs flipping
    #for bvec in bvecs:
    #    bvec[0] = -bvec[0]
    #    bvec[1] = -bvec[1]

    #output into plotly format
    data = []
    for shell in shells:
        xs = []
        ys = []
        zs = []
        texts = []
        for v in shells[shell]:
            texts.append(v[0])
            xs.append(v[2][0])
            ys.append(v[2][1])
            zs.append(v[2][2])

        if shell == "0.0":
            color = "black"
        elif shell == "1000.0":
            color = "blue"
        elif shell == "2000.0":
            color = "green"
        elif shell == "3000.0":
            color = "purple"
        elif shell == "4000.0":
            color = "cyan"
        else:
            color = "red"

        data.append({
            'type': 'scatter3d',
            'mode': 'text', 
            'name': str(shell), 
            'x': xs,
            'y': ys,
            'z': zs,
            'text': texts,
            'textfont': {
                'color': color,
                'size': 8
            }
        })

    results['brainlife'].append({
        'type': 'plotly',
        'name': 'Gradients (bvecs/bvals)',
        'layout': {},
        'data': data,
    })

    try:
        print("loading dwi to check bvecs flipping")
        img = nibabel.load(config['dwi'])
        print(img.header) 

        results['dwi_headers'] = str(img.header) #need to str() so that we can save it to product.json
        results['dwi_affine'] = str(img.affine) #need to str() as array is not serializable
        
        #determine storage orientation
        #http://community.mrtrix.org/t/mrconvert-flips-gradients/581/6
        det = np.linalg.det(img.affine)
        results['dwi_affine_determinant'] = det
        print("affine determinant", det)
        if det < 0:
            results['storage_orientation'] = 'radiological'
            print('storage_orientation: radiological - matches bvecs orientation')
        else:
            results['storage_orientation'] = 'neurological'
            print('storage_orientation: neurological - flipping x')
            #I should really flip the image on x axis.. but easier thing to do is just 
            #flip the bvec-x 
            for bvec in bvecs:
                bvec[0] = -bvec[0]
            warning("storage orientation is neurologial (det>0). Apps are often written for radiological orientation. Watch out!")
            results['tags'].append("neurological")

        # check dimensions
        dims = img.header['dim'][0]
        if dims != 4:
            error("DWI should be 4D but has " + str(dims))

        # 4d should have same col num as bvecs/bval directions
        if directions != img.header['dim'][4]:
            error("bvecs column count which is " + str(img.header['dim'][4]) + " doesn't match bvecs col counts:" + str(directions))

        # check affine
        check_affine(img.header.get_base_affine())

        #create symlink
        if(os.path.islink('dwi.nii.gz')):
            os.unlink('dwi.nii.gz')
        os.symlink(config['dwi'], "dwi.nii.gz")

    except Exception as e:
        error("nibabel failed on dwi. error code: " + str(e))

    ###############################################################################################
    #
    # check bvecs flipping
    #

    #find the most common bvals (most likely to find the right directions)
    #TODO if if there are near identical number of bvalues, should I use higher bvalue?
    b=most_common(bvals.tolist())
    print("using bvalue", b)
    
    #calculate bvecs angle from various reference angles
    angs = []
    for idx in range(len(bvecs)):
        bvec = bvecs[idx]
        bval = bvals[idx]

        #ignore bvecs with low bval
        if bval < 500:
            #print("low bval", idx);
            continue

        #ignore bvecs that's too off
        if abs(bval - b) > 300:
            #print("bval too off", idx, bval);
            continue

        #ignore 0 vector
        print(bval, np.linalg.norm(bvec))
        if np.linalg.norm(bvec) == 0:
            #[0,0,0] with non-0 bval? maybe it means b0?
            continue

        #calculate angle from x/y/z directions
        x1_ang = flip_angle(angle_between(bvec, (1,1,0)))
        x2_ang = flip_angle(angle_between(bvec, (-1,1,0)))
        y1_ang = flip_angle(angle_between(bvec, (0,1,1)))
        y2_ang = flip_angle(angle_between(bvec, (0,-1,1)))
        z1_ang = flip_angle(angle_between(bvec, (1,0,1)))
        z2_ang = flip_angle(angle_between(bvec, (1,0,-1)))
        angs.append((x1_ang, x2_ang, y1_ang, y2_ang, z1_ang, z2_ang, bvec, bval, idx));

    #analyze x/y flipping
    print("xflip check")
    angs.sort(key=lambda tup: tup[0])
    x1 = angs[0][8]
    print(angs[0])
    angs.sort(key=lambda tup: tup[1])
    x2 = angs[0][8]
    print(angs[0])
    print("yflip check")
    angs.sort(key=lambda tup: tup[2])
    y1 = angs[0][8]
    print(angs[0])
    angs.sort(key=lambda tup: tup[3])
    y2 = angs[0][8]
    print(angs[0])
    print("zflip check")
    angs.sort(key=lambda tup: tup[4])
    z1 = angs[0][8]
    print(angs[0])
    angs.sort(key=lambda tup: tup[5])
    z2 = angs[0][8]
    print(angs[0])

    print("loading image data")
    img_data = img.get_fdata()

    #print("value at 76,33,34", img_data[76, 33, 34,0])

    ###############################################################################################
    # x test
    left=0
    right=0
    for i in range(img_data.shape[2]):
        
        slice1 = img_data[:, :, i, x1]
        slice2 = img_data[:, :, i, x2]
      
        pos = np.subtract(slice2, slice1).clip(min=0)
        neg = np.subtract(slice1, slice2).clip(min=0)

        #if i == 30:
        #    plt.imshow(pos, cmap='gray', origin='lower')
        #    plt.show() 

        #high std means image is aligned with the same direction
        #low std means image is aligned with orthogonal direction
        right+=np.std(sum_diag(pos, 1))
        left+=np.std(sum_diag(pos, -1))
        right+=np.std(sum_diag(neg, -1))
        left+=np.std(sum_diag(neg, 1))
        #print(i, np.std(sum_diag(pos, 1)), np.std(sum_diag(pos, -1)), np.std(sum_diag(neg, 1)), np.std(sum_diag(neg, -1)))
        
    xy_flipped=False
    print ("xy score", left, right, get_change(left, right))
    if left > right:
        print("x/y-flipped!")
        #warning("bvecs-x seems to be flipped")
        xy_flipped=True
    #else:
    #    results['brainlife'].append({"type": "success", "msg": "bvecs-x flip looks good"})

    ###############################################################################################
    # y test
    left=0
    right=0
    for i in range(img_data.shape[0]):
        slice1 = img_data[i, :, :, y1]
        slice2 = img_data[i, :, :, y2]
      
        pos = np.subtract(slice2, slice1).clip(min=0)
        neg = np.subtract(slice1, slice2).clip(min=0)

        #plt.subplot(4, 8, (i/4)+1)
        #plt.imshow(pos, cmap='gray') 

        #high std means image is aligned with the same direction
        #low std means image is aligned with orthogonal direction
        right+=np.std(sum_diag(pos, 1))
        left+=np.std(sum_diag(pos, -1))
        right+=np.std(sum_diag(neg, -1))
        left+=np.std(sum_diag(neg, 1))
        #print(i, np.std(sum_diag(pos, 1)), np.std(sum_diag(pos, -1)), np.std(sum_diag(neg, 1)), np.std(sum_diag(neg, -1)))

    #plt.show()
        
    yz_flipped=False
    print ("yz score", left, right, get_change(left, right))
    if left > right:
        print("y/z-flipped!")
        #warning("bvecs-y seems to be flipped")
        yz_flipped=True
    #else:
    #    results['brainlife'].append({"type": "success", "msg": "bvecs-y flip looks good"})

    #analyze z flipping
    #find best slices to analyze for x flip
    #print "z2", angs[0]

    #if x is flipped, switch z1/z2 to simulate *correct* x-flip
    #if x_flipped:
    #    t = z2
    #    z2 = z1
    #    z1 = t

    ###############################################################################################
    # z test
    left=0
    right=0
    for i in range(img_data.shape[1]):
        slice1 = img_data[:, i, :, z1]
        slice2 = img_data[:, i, :, z2]
     
        pos = np.subtract(slice2, slice1).clip(min=0)
        neg = np.subtract(slice1, slice2).clip(min=0)

        right+=np.std(sum_diag(pos, 1))
        left+=np.std(sum_diag(pos, -1))
        right+=np.std(sum_diag(neg, -1))
        left+=np.std(sum_diag(neg, 1))
        #print(i, np.std(sum_diag(pos, 1)), np.std(sum_diag(pos, -1)), np.std(sum_diag(neg, 1)), np.std(sum_diag(neg, -1)))
        
    print ("xz score", left, right, get_change(left, right))
    xz_flipped=False
    if left > right:
        print("x/z-flipped!")
        xz_flipped=True
        #warning("bvecs-z seems to be flipped. You should flip it")
    #else:
    #    results['brainlife'].append({"type": "success", "msg": "bvecs-z flip looks good"})

    if not xy_flipped and not yz_flipped and not xz_flipped:
        print("no flip!")
        results['brainlife'].append({"type": "success", "msg": "bvecs-z flip looks good"})

    if xy_flipped and xz_flipped:
        print("x is flipped !")
        warning("bvecs-x seems to be flipped. You should flip it")
    if xy_flipped and yz_flipped:
        print("y is flipped !")
        warning("bvecs-y seems to be flipped. You should flip it")
    if yz_flipped and xz_flipped:
        print("z is flipped !")
        warning("bvecs-z seems to be flipped. You should flip it")

with open("product.json", "w") as fp:
    json.dump(results, fp)

#print(results)
